/**
 * @author      OA Wu <comdan66@gmail.com>
 * @copyright   Copyright (c) 2015 OA Wu Design
 */

@import "_oa";

$names: ('pure', 'red', 'orange', 'yellow', 'green', 'blue', 'cyan', 'purple');

.oa-btn {
  @include button('pure');

  @each $name in $names {
    &.#{$name} {
      $value: map-get($btns, $name);
      @if($value){
        background-color: rgba(nth($value, 1), nth($value, 2), nth($value, 3), 1);
        &:hover {
          background-color: rgba(nth($value, 1) - 10, nth($value, 2) - 10,nth($value, 3) - 10, 1);
        }
        &[disabled] {
          background-color: rgba(nth($value, 1) + 70, nth($value, 2) + 70, nth($value, 3) + 70, 0.85);
          color: rgba(255, 255, 255, 1);
        }
      }
    }
  }
}

.oa-rdo {
  @include radio('pure');

  @each $name in $names {
    &.#{$name} {
      $value: map-get($btns, $name);
      @if($value) {
        input[type='radio'] {
          & ~ span {
            border-color: rgba(nth($value, 1) - 100, nth($value, 2) - 100, nth($value, 3) - 100, .4);

            &:after {
              background-color: rgba(nth($value, 1), nth($value, 2), nth($value, 3), 1);
            }
          }
        }
      }
    }
  }
}

.oa-ckb {
  @include checkbox('pure');

  @each $name in $names {
    &.#{$name} {
      $value: map-get($btns, $name);
      @if($value) {
        input[type='checkbox'] {
          &[disabled] {
            & ~ span {
              border-color: rgba(nth($value, 1) - 100, nth($value, 2) - 100,nth($value, 3) - 100, .25);
            }
          }
          &:checked {
            & ~ span {
              border-color: rgba(nth($value, 1) - 100, nth($value, 2) - 100,nth($value, 3) - 100, .3);
            }
          }
          & ~ span {
            border-color: rgba(nth($value, 1) - 100, nth($value, 2) - 100,nth($value, 3) - 100, .4);
            &:after {
              border-color: rgba(nth($value, 1), nth($value, 2), nth($value, 3), 1);
            }
          }
        }
      }
    }
  }
}

.oa-swh {
  @include switch(false, 'pure');

  @each $name in $names {
    &.#{$name} {
      $value: map-get($btns, $name);
      @if($value) {
        input[type='checkbox'] {
          &[disabled] {
            & ~ span {
              &:before {
                background-color: rgba(nth($value, 1) + 125, nth($value, 2) + 125, nth($value, 3) + 125, 1);
              }
              &:after {
                background-color: rgba(nth($value, 1) + 125, nth($value, 2) + 125, nth($value, 3) + 125, 0.9);
              }
            }
          }
          &:checked {
            & ~ span {
              &:before {
                background-color: rgba(nth($value, 1) + 25, nth($value, 2) + 25, nth($value, 3) + 25, 0.8);
              }
              &:after {
                background-color: rgba(nth($value, 1) - 25, nth($value, 2) - 25, nth($value, 3) - 25, 1);
              }
            }
          }
          & ~ span {
            &:before {
              background-color: rgba(nth($value, 1) + 75, nth($value, 2) + 75, nth($value, 3) + 75, 0.8);
            }
            &:after {
              background-color: rgba(nth($value, 1) + 25, nth($value, 2) + 25, nth($value, 3) + 25, 1);
            }
          }
        }
      }
    }
  }
}
.oa-swh.full {
  @include switch(true, 'pure');

  @each $name in $names {
    &.#{$name} {
      $value: map-get($btns, $name);
      @if($value) {
        input[type='checkbox'] {
          &[disabled] {
            & ~ span {
              &:before {
                background-color: rgba(nth($value, 1) + 55, nth($value, 2) + 55, nth($value, 3) + 55, 0.2);
              }
              &:after {
                background-color: rgba(nth($value, 1) + 105, nth($value, 2) + 85, nth($value, 3) + 85, 0.9);
              }
            }
          }
          &:checked {
            & ~ span {
              &:before {
                background-color: rgba(nth($value, 1) + 25, nth($value, 2) + 25, nth($value, 3) + 25, 0.8);
              }
              &:after {
                background-color: rgba(nth($value, 1) - 25, nth($value, 2) - 25, nth($value, 3) - 25, 1);
              }
            }
          }
          & ~ span {
            &:before {
              background-color: rgba(nth($value, 1) + 75, nth($value, 2) + 75, nth($value, 3) + 75, 0.8);
            }
            &:after {
              background-color: rgba(nth($value, 1) + 25, nth($value, 2) + 25, nth($value, 3) + 25, 1);
            }
          }
        }
      }
    }
  }
}

.oa-paper {
  @include paper('pure');
  width: 200px;
  height: 150px;

  &.shadow {
    @include paper('shadow');
  }
  &.corner {
    @include paper('corner');
  }
  &.convex {
    @include paper('convex');
  }
  &.horizontal-convex {
    @include paper('horizontal-convex');
  }
  &.vertical-convex {
    @include paper('vertical-convex');
  }
}